############################################# Importing the libraries #############################################
import numpy as np
import pandas as pd
from numpy.random import seed
seed(1)
from tensorflow import set_random_seed
set_random_seed(2)
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.optimizers import Adam
import matplotlib.pyplot as plt
from keras import regularizers
from keras.models import load_model

############################################# Importing the data #############################################################
dataset_1 = pd.read_csv('training_dataset.csv')
dataset_2 = pd.read_csv('testing_dataset.csv')

############################################### Merging the dataframe #############################################
dataset=dataset_1.append(dataset_2)
dataset.groupby(['class']).size()

############################################## Spiltting into X and Y ###############################################
X_data=dataset.iloc[:, 0:16].values
from sklearn.preprocessing import Imputer #Handling NAN Values
X_data = Imputer().fit_transform(X_data)
Y_data=dataset.iloc[:,16].values

############################################## Randomzing the data ###############################################
idx=np.random.RandomState(seed=45).permutation(len(X_data))
X_data=X_data[idx]
Y_data=Y_data[idx]

############################################## Spiltting in X-Y test and X-Y train ##################################
X_train= X_data[0:40000]
X_test=X_data[40001:49456]

Y_train= Y_data[0:40000]
Y_test= Y_data[40001:49456]

############################################ Categorical varaiables ##############################################
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
labelencoder_X= LabelEncoder()                                         
Y_train=Y_train[:]=labelencoder_X.fit_transform (Y_train[:]) 
Y_train=np.reshape(Y_train,(-1,1))
onehotencoder= OneHotEncoder(categorical_features=[0])                  
Y_train=onehotencoder.fit_transform(Y_train).toarray()
Y_train=Y_train[:,] #Avoid Dummy Variable Trap

from sklearn.preprocessing import LabelEncoder 
labelencoder_X= LabelEncoder()                                          
Y_test=Y_test[:,]=labelencoder_X.fit_transform (Y_test[:,]) 
Y_test=np.reshape(Y_test,(-1,1))
onehotencoder= OneHotEncoder(categorical_features=[0])                  
Y_test=onehotencoder.fit_transform(Y_test).toarray()
Y_test=Y_test[:,] #Avoid Dummy Variable Trap

############################################# Normalizing the data #########################################################
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

########################################### Parameter tuning #################################################
epochs=100
learning_rate=0.001
batch_size=128
num_classes=6

########################################### Neural Network Model ###########################################################
#Initializng the Neural Network
model = Sequential()

#Adding the input layer and the 1st(only) hidden layer 
model.add(Dense(250, activation='relu', input_shape=(16,),kernel_regularizer=regularizers.l2(0.1)))
model.add(Dropout(0.2))

#Output layer
model.add(Dense(num_classes, activation='softmax'))

####################################### Model Summary ######################################################################
model.summary()

########################################## Training ########################################################################
model.compile(loss='categorical_crossentropy',optimizer=Adam(lr=learning_rate),metrics=['accuracy'])

history = model.fit(X_train, Y_train,batch_size=batch_size,epochs=epochs,validation_data=(X_test, Y_test))

############################################ Evaluating ####################################################################
score = model.evaluate(X_test, Y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

score = model.evaluate(X_train, Y_train, verbose=0)
print('Train loss:', score[0])
print('Train accuracy:', score[1])

################################################# Visualizing ###############################################################
# List all data in history
print(history.history.keys())
# Summarize history for accuracy
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# Summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

######################################### Saving the Model #################################################################
model.save('C:\\Users\\Sairaj\\Downloads\\malware_dac_2.h6')

#################################################### Evaluation ############################################################
import numpy as np
from keras import backend
backend.set_learning_phase(False)
keras_model=load_model('C:\\Users\\Sairaj\\Downloads\\malware_dac_2.h6')
pred = np.argmax(keras_model.predict(X_test,None), axis = 1)
from sklearn.metrics import confusion_matrix
conf_mat = confusion_matrix(Y_test.argmax(axis=1), pred)
from sklearn.metrics import classification_report
report = classification_report(Y_test.argmax(axis=1), pred)
print(report)

########################################### Loading the model for testing #####################################
from keras import backend
backend.set_learning_phase(False)
model=load_model('C:\\Users\\Sairaj\\Downloads\\malware_dac_2.h6')
import pickle
filename = 'C:\\Users\\Sairaj\\Downloads\\malware_adv_sample_a.h6'
a= pickle.load(open(filename, 'rb'))
score = model.evaluate(a,Y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

pred = np.argmax(keras_model.predict(a,None), axis = 1)
from sklearn.metrics import confusion_matrix
conf_mat = confusion_matrix(Y_test.argmax(axis=1), pred)
from sklearn.metrics import classification_report
report = classification_report(Y_test.argmax(axis=1), pred)
print(report)